#
# Tectonic - An academic Cyber Range
# Copyright (C) 2024 Grupo de Seguridad Informática, Universidad de la República,
# Uruguay
#
# This file is part of Tectonic.
#
# Tectonic is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Tectonic is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Tectonic.  If not, see <http://www.gnu.org/licenses/>.
#
---
# A playbook for creating users for the students.
#
# Expects a variable `prefix` for the usernames and a dictionary
# `users` that maps usernames (of the form <prefix><instance>,
# e.g. trainee02) to objects with these attributes:
# 
#   - password: The user plain-text password. Optional.
#   - password_hash: The hashed password. Optional. If not set, the
#     user is created without password.
#   - authorized_keys: A string with the public keys of the students.
#     Optional. If not set, the user is created with an empty
#     authorized_keys file.

- name: "Create student users on student access host."
  hosts: student_access
  gather_facts: true

  tasks:
    - name: "Create trainee users (optionally with password)"
      ansible.builtin.user:
        name: "{{ item.key }}"
        password: "{{ item.value.password_hash | default(omit) }}"
        shell: "/usr/sbin/nologin"
      loop: "{{ users | dict2items }}"

    - name: "Populate authorized_keys"
      ansible.posix.authorized_key:
        user: "{{ item.key }}"
        key: "{{ item.value.authorized_keys }}"
      loop: "{{ users | dict2items }}"
      when: item.value.authorized_keys is defined

    - name: "Enable SSH login with password"
      block:
        - name: "Find SSH config files"
          ansible.builtin.find:
            paths: /etc/ssh/sshd_config.d
            file_type: file
          register: ssh_config
        - name: "Adjust SSH configuration files"
          ansible.builtin.lineinfile:
            path: "{{ item.path }}"
            regex: "^\\s*PasswordAuthentication"
            line: "PasswordAuthentication yes"
          with_items:
            - "{{ ssh_config['files'] }}"
            - { path: '/etc/ssh/sshd_config' }
        - name: "Restart SSH service"
          ansible.builtin.service:
            name: sshd
            state: restarted
      when: 
        - ssh_password_login
    
    - name: "Disable SSH login with password"
      block:
        - name: "Find SSH config files"
          ansible.builtin.find:
            paths: /etc/ssh/sshd_config.d
            file_type: file
          register: ssh_config
        - name: "Adjust SSH configuration files"
          ansible.builtin.lineinfile:
            path: "{{ item.path }}"
            regex: "^\\s*PasswordAuthentication"
            line: "PasswordAuthentication no"
          with_items:
            - "{{ ssh_config['files'] }}"
            - { path: '/etc/ssh/sshd_config' }
        - name: "Restart SSH service"
          ansible.builtin.service:
            name: sshd
            state: restarted
      when: 
        - not ssh_password_login
        - ansible_facts['os_family'] != "Windows"

- name: "Create student users on the rest of the machines."
  hosts: all:!student_access
  gather_facts: true
  vars:
    username: "{{ '%s%02d' | format(prefix, instance) }}"

  tasks:
    - name: "Create the trainee user (optionally with password)"
      ansible.builtin.user:
        name: "{{ username }}"
        password: "{{ users[username].password_hash | default(omit) }}"
        shell: "/bin/bash"
      when: ansible_facts['os_family'] != "Windows"

    - name: "Create .ssh dir"
      ansible.builtin.file:
        path: "/home/{{ username }}/.ssh"
        mode: 0700
        owner: "{{ username }}"
        group: "{{ username }}"
        state: directory
      when: 
        - users[username].authorized_keys is defined
        - ansible_facts['os_family'] != "Windows"

    - name: "Populate authorized_keys"
      ansible.builtin.copy:
        dest: "/home/{{ username }}/.ssh/authorized_keys"
        content: "{{ users[username].authorized_keys }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: 0600
      when: 
        - users[username].authorized_keys is defined
        - ansible_facts['os_family'] != "Windows"

    - name: "Add user to sudoers without password"
      ansible.builtin.copy:
        dest: "/etc/sudoers.d/99-trainee"
        content: "{{ username }} ALL=(ALL) NOPASSWD:ALL"
      when: 
        - ansible_facts['os_family'] != "Windows"

    - name: "Enable SSH login with password"
      block:
        - name: "Find SSH config files"
          ansible.builtin.find:
            paths: /etc/ssh/sshd_config.d
            file_type: file
          register: ssh_config
        - name: "Adjust SSH configuration files"
          ansible.builtin.lineinfile:
            path: "{{ item.path }}"
            regex: "^\\s*PasswordAuthentication"
            line: "PasswordAuthentication yes"
          with_items:
            - "{{ ssh_config['files'] }}"
            - { path: '/etc/ssh/sshd_config' }
        - name: "Restart SSH service"
          ansible.builtin.service:
            name: sshd
            state: restarted
      when: 
        - ssh_password_login
        - ansible_facts['os_family'] != "Windows"

    - name: "Disable SSH login with password"
      block:
        - name: "Find SSH config files"
          ansible.builtin.find:
            paths: /etc/ssh/sshd_config.d
            file_type: file
          register: ssh_config
        - name: "Adjust SSH configuration files"
          ansible.builtin.lineinfile:
            path: "{{ item.path }}"
            regex: "^\\s*PasswordAuthentication"
            line: "PasswordAuthentication no"
          with_items:
            - "{{ ssh_config['files'] }}"
            - { path: '/etc/ssh/sshd_config' }
        - name: "Restart SSH service"
          ansible.builtin.service:
            name: sshd
            state: restarted
      when: 
        - not ssh_password_login
        - ansible_facts['os_family'] != "Windows"

    # Configurations for windows guests
    - name: "Create the trainee user (optionally with password). For Windows."
      ansible.windows.win_user:
        name: "{{ username }}"
        password: "{{ users[username].password | default(omit) }}"
      when: ansible_facts['os_family'] == "Windows"
      
    - name: "Create .ssh dir. For windows"
      ansible.windows.win_file:
        path: "C:\\Users\\{{ username }}\\.ssh"
        state: directory
      when: 
        - users[username].authorized_keys is defined
        - ansible_facts['os_family'] == "Windows"

    - name: "Populate authorized_keys. For Windows."
      ansible.windows.win_copy:
        dest: "C:\\Users\\{{ username }}\\.ssh\\authorized_keys"
        content: "{{ users[username].authorized_keys }}"
      when: 
        - users[username].authorized_keys is defined
        - ansible_facts['os_family'] == "Windows"
